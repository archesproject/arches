{% load staticfiles %}
{% load i18n %}

<script>
    require.config({
        baseUrl: '{{ STATIC_URL }}js',
        paths: {
            'plugins': '{{ STATIC_URL }}plugins',
            'widget-templates': '{% url "widgets" ""%}'.replace(/\/$/, ""),
            'report-templates': '{% url "report-templates" ""%}'.replace(/\/$/, ""),
            'datatype-config-templates': '{% url "datatype_template" ""%}'.replace(/\/$/, ""),
            'nifty': '{{ STATIC_URL }}plugins/nifty',
            'async': '//cdnjs.cloudflare.com/ajax/libs/requirejs-async/0.1.1/async',
            'text': '//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min',
            'jquery': '//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.1/jquery.min',
            'js-cookie': '//cdnjs.cloudflare.com/ajax/libs/js-cookie/2.1.1/js.cookie.min',
            'select2': '//cdnjs.cloudflare.com/ajax/libs/select2/3.5.1/select2.min',
            'bootstrap': '//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.1.0/js/bootstrap.min',
            'bootstrap-nifty': '//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.min',
            'jquery-ui': '//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min',
            'flexslider': '//cdnjs.cloudflare.com/ajax/libs/flexslider/2.2.2/jquery.flexslider-min',
            'openlayers': '{{ STATIC_URL }}plugins/openlayers/ol',
            'easing': '//cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min',
            'backbone': '//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min',
            'underscore': '//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.0/underscore-min',
            'jquery-validate': '//cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.11.1/jquery.validate.min',
            'd3': '//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min',
            'dropzone': '//cdnjs.cloudflare.com/ajax/libs/dropzone/3.8.4/dropzone-amd-module.min',
            'summernote': '//cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.min',
            'knockout': '//cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min',
            'knockout-mapping': '//cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min',
            'moment': '//cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min',
            'bootstrap-datetimepicker': '//cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/3.1.3/js/bootstrap-datetimepicker.min',
            'shp': '//raw.githubusercontent.com/wavded/js-shapefile-to-geojson/master/shapefile',
            'blueimp-gallery': '//cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.15.2/js/blueimp-gallery',
            'blueimp-jquery': '//blueimp.github.io/Gallery/js/jquery.blueimp-gallery',
            'blueimp-helper': '//cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.15.2/js/blueimp-helper.min',
            'bootstrap-datepicker': '//cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.0/js/bootstrap-datepicker.min',
            'datatables.net': '//cdn.datatables.net/1.10.12/js/jquery.dataTables.min',
            'datatables.net-bs': '//cdn.datatables.net/1.10.12/js/dataTables.bootstrap.min',
            'datatables.net-responsive': '//cdn.datatables.net/responsive/2.1.0/js/dataTables.responsive.min',
            'datatables': '//cdn.datatables.net/responsive/2.1.0/js/responsive.bootstrap.min',
            'chosen': '//cdnjs.cloudflare.com/ajax/libs/chosen/1.4.2/chosen.jquery.min',
            'mapbox-gl': '//api.mapbox.com/mapbox-gl-js/v0.21.0/mapbox-gl',
            'noUiSlider': '//cdnjs.cloudflare.com/ajax/libs/noUiSlider/8.5.1/nouislider.min',
            'chosen-ajax-addition': '{{ STATIC_URL }}plugins/chosen.ajaxaddition.jquery'
        },
        shim: {
            'openlayers': {
                exports: 'ol'
            },
            'nifty': {
                deps: ['bootstrap-nifty', 'jquery', 'jquery-ui']
            },
            'chosen': {
                deps: ['jquery']
            },
            'bootstrap': {
                deps: ['jquery', 'jquery-ui']
            },
            'bootstrap-nifty': {
                deps: ['jquery', 'jquery-ui']
            },
            'jquery-validate': {
                deps: ['jquery']
            },
            'jquery-ui': {
                deps: ['jquery']
            },
            'select2': {
                deps: ['jquery']
            },
            'datatables': {
                deps: ['jquery']
            },
            'datatables.net': {
                deps: ['jquery']
            },
            'noUiSlider': {
                deps: ['jquery'],
                exports : '$'
            },
            'plugins/mapbox-gl-draw': {
                deps: ['mapbox-gl'],
                exports: 'mapboxgl.Draw'
            },
            'chosen-ajax-addition': {
                deps: ['jquery', 'chosen']
            }
        }
    });

    require(['utils/set-csrf-token']);

    // put values here that should be accessible application wide
    define('arches', [], function () {
        return {
            urls: {
                home: "{% url 'home' %}",
                media: "{{ STATIC_URL }}",
                uploadedfiles: "{{ MEDIA_URL }}",
                concept_tree: "{% url 'concept_tree' %}",
                concept: "{% url 'concept' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                concept_search: "{% url 'concept_search' %}",
                concept_manage_parents: "{% url 'concept_manage_parents' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                dropdown: "{% url 'dropdown' %}",
                get_pref_label: "{% url 'get_pref_label' %}",
                from_sparql_endpoint: "{% url 'from_sparql_endpoint' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                search_sparql_endpoint: "{% url 'search_sparql_endpoint' %}",
                confirm_delete: "{% url 'confirm_delete' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                edit_history: "{% url 'edit_history' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                search_terms: "{% url 'search_terms' %}",
                search_results: "{% url 'search_results' %}",
                search_results_export: "{% url 'search_results_export' %}",
                map_layers: "{% url 'map_layers' '' %}",
                map_markers: "{% url 'map_markers' '' %}",
                reports: "{% url 'report' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                buffer: "{% url 'buffer'%}",
                related_resources: "{% url 'related_resources' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                get_admin_areas: "{% url 'get_admin_areas'%}",
                config: "{% url 'config'%}",
                node: "{% url 'node' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                graph: "{% url 'graph' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                card: "{% url 'card' '' %}",
                form: "{% url 'form' '' %}",
                report_editor: "{% url 'report_editor' '' %}",
                resource_editor: "{% url 'resource_editor' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                resource_data: "{% url 'resource_data' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace(/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/g, ''),
                tile: "{% url 'tile' %}",
                geocoder: "{% url 'geocoder' %}",
                report_editor: "{% url 'report_editor' '' %}"
            },
            mapDefaults: {
                x: {{ map_info.x }},
                y: {{ map_info.y }},
                zoom: {{ map_info.zoom }},
                minZoom: {{ map_info.map_min_zoom }},
                maxZoom: {{ map_info.map_max_zoom }},
                extent: '{{ map_info.extent }}'
            },
            resourceMarker: {
                font: '{{ map_info.resource_marker_font }}',
                icon: '{{ map_info.resource_marker_icon }}',
                defaultColor: '{{ map_info.resource_marker_color }}'
            },
            // bingKey: "{{ map_info.bing_key }}",
            bingLayers: [{
                id: 'Road',
                name: "{% trans 'Streets' %}",
                icon: "{% static 'img/map/bing_streets.png' %}"
            },
            {
                id: 'Aerial',
                name: "{% trans 'Satellite' %}",
                icon: "{% static 'img/map/bing_satellite.png' %}"
            },
            {
                id: 'AerialWithLabels',
                name: "{% trans 'Streets & Satellite' %}",
                icon: "{% static 'img/map/bing_hybrid.png' %}"
            }],
            confirmNav: {
                title: "{% trans 'Edits pending...' %}",
                text: "{% trans 'You currently have edits pending, are you sure you would like to proceed (and discard any pending edits)?' %}"
            },
            confirmGraphDelete: {
                title: "{% trans 'Delete Graph/Resource?' %}",
                text: "{% trans 'Deleting this graph/resource will remove it (and all associated data) entirely.  Are you sure you would like to proceed?' %}"
            },
            requestFailed: {
                title: "{% trans 'Request Failed...' %}",
                text: "{% trans 'Sorry! The request failed. Please try again.  Contact your system administrator if the problem persists.' %}"
            },
            mapboxApiKey: '{{ map_info.mapbox_api_key }}',
            mapSources: {{% autoescape off %}{% for map_source in map_sources %}
                '{{ map_source.name }}': {{ map_source.source_json }},
            {% endfor %}{% endautoescape %}},
            mapLayers: [{% autoescape off %}{% for map_layer in map_layers %}{
                'name': '{{ map_layer.name }}',
                'layer_definitions': {{ map_layer.layer_json }},
                'isoverlay': {{ map_layer.isoverlay|lower }},
                'sortorder': {{ map_layer.sortorder }},
                'icon': '{{ map_layer.icon }}'
            },{% endfor %}{% endautoescape %}],
            conceptCollections: [{% autoescape off %}{% for concept_collection in concept_collections %}{
                'label': '{{ concept_collection.label }}',
                'id': '{{ concept_collection.id }}',
            },{% endfor %}{% endautoescape %}],
        };
    });

    define('resource-types', [], function () {
        var resourceTypes = {
            {% for type, type_data in resource_types %}
            "{{type}}": {
                id: "{{type_data.resourcetypeid}}",
                icon: "{{type_data.icon_class}}",
                name: "{{type_data.name}}",
                defaultDescription: "{{type_data.default_description}}",
                descriptionNode: "{{type_data.description_node}}",
                categories: [
                    {% for category in type_data.categories %}
                    "{{category}}"
                    {% endfor %}
                ],
                color: "{{type_data.marker_color}}",
                strokeColor: "{{type_data.stroke_color}}",
                fillColor: "{{type_data.fill_color}}"
            },
            {% endfor %}
        };

        return resourceTypes;
    });

    define('widgets', [{% for widget in widgets %}'{{ widget.component }}',{% endfor %}], function () {
        return {{% autoescape off %}{% for widget in widgets %}
            '{{ widget.pk }}': {
                'name': '{{ widget.name }}',
                'component': '{{ widget.component }}',
                'datatype': '{{ widget.datatype }}',
                'defaultconfig': '{{ widget.defaultconfig_json }}'
            },
        {% endfor %}{% endautoescape %}};
    });

    define('report-templates', [{% for template in report_templates %}'{{ template.component }}',{% endfor %}], function () {
        return {{% autoescape off %}{% for template in report_templates %}
            '{{ template.pk }}': {
                'componentname': '{{ template.componentname }}',
                'component': '{{ template.component }}',
                'defaultconfig': '{{ template.defaultconfig_json }}'
            },
        {% endfor %}{% endautoescape %}};
    });


    define('datatype-config-components',
        [{% for datatype in datatypes %}{% if datatype.configcomponent != None %}'{{ datatype.configcomponent }}',{% endif %}{% endfor %}],
        function () { return });

    define('geoms', function () {
        {% autoescape off %}return {{geoms}};{% endautoescape %}
    });
</script>
