
{% load staticfiles %}
{% load i18n %}

<script>
    var CKEDITOR_BASEPATH = '{{ STATIC_URL }}bower_components/ckeditor/';
    require.config({
        baseUrl: '{{ STATIC_URL }}js',
        paths: {
            'plugins': '{{ STATIC_URL }}plugins',
            'widget-templates': '{% url "widgets" ""%}'.replace(/\/$/, ""),
            'report-templates': '{% url "report-templates" ""%}'.replace(/\/$/, ""),
            'function-templates': '{% url "function-templates" ""%}'.replace(/\/$/, ""),
            'templates': '{% url "templates" ""%}'.replace(/\/$/, ""),
            'datatype-config-templates': '{% url "datatype_template" ""%}'.replace(/\/$/, ""),
            'nifty': '{{ STATIC_URL }}plugins/nifty',
            'async': '{{ STATIC_URL }}bower_components/requirejs-plugins/src/async',
            'text': '{{ STATIC_URL }}bower_components/requirejs-text/text',
            'jquery': '{{ STATIC_URL }}bower_components/jquery/dist/jquery.min',
            'js-cookie': '{{ STATIC_URL }}bower_components/js-cookie/src/js.cookie',
            'select2': '{{ STATIC_URL }}bower_components/select2v3/index',
            'bootstrap': '{{ STATIC_URL }}bower_components/bootstrap/dist/js/bootstrap.min',
            'jquery-ui': '{{ STATIC_URL }}bower_components/jqueryui/ui/jquery-ui',
            'flexslider': '{{ STATIC_URL }}bower_components/flexslider/2.2.2/jquery.flexslider-min',
            'easing': '{{ STATIC_URL }}bower_components/jquery-easing/jquery.easing.min',
            'backbone': '{{ STATIC_URL }}bower_components/backbone/backbone',
            'underscore': '{{ STATIC_URL }}bower_components/underscore/underscore-min',
            'jquery-validate': '{{ STATIC_URL }}bower_components/jquery-validate/jquery.validate',
            'd3': '{{ STATIC_URL }}bower_components/d3/d3.min',
            'dropzone': '{{ STATIC_URL }}bower_components/dropzone/downloads/dropzone-amd-module.min',
            'ckeditor': '{{ STATIC_URL }}bower_components/ckeditor/ckeditor',
            'ckeditor-jquery': '{{ STATIC_URL }}bower_components/ckeditor/adapters/jquery',
            'knockout': '{{ STATIC_URL }}bower_components/knockout/dist/knockout',
            'knockout-mapping': '{{ STATIC_URL }}bower_components/bower-knockout-mapping/dist/knockout.mapping.min',
            'moment': '{{ STATIC_URL }}bower_components/moment/min/moment.min',
            'bootstrap-datetimepicker': '{{ STATIC_URL }}bower_components/bootstrap3-datetimepicker/build/js/bootstrap-datetimepicker.min',
            'shp': '{{ STATIC_URL }}bower_components/shp/index',
            'blueimp-gallery': '{{ STATIC_URL }}bower_components/blueimp-gallery/js/blueimp-gallery.min',
            'blueimp-jquery': '{{ STATIC_URL }}bower_components/blueimp-gallery/js/jquery.blueimp-gallery.min',
            'blueimp-helper': '{{ STATIC_URL }}bower_components/blueimp-gallery/js/blueimp-helper.min',
            'datatables.net': '{{ STATIC_URL }}bower_components/datatables.net/js/jquery.dataTables.min',
            'datatables.net-bs': '{{ STATIC_URL }}bower_components/datatables.net-bs/js/dataTables.bootstrap.min',
            'datatables.net-responsive': '{{ STATIC_URL }}bower_components/datatables.net-responsive/js/dataTables.responsive.min',
            'datatables.net-responsive-bs': '{{ STATIC_URL }}bower_components/datatables.net-responsive-bs/js/responsive.bootstrap',
            'chosen': '{{ STATIC_URL }}bower_components/chosen/chosen.jquery.min',
            'mapbox-gl': '{{ STATIC_URL }}bower_components/mapbox-gl/mapbox-gl',
            'mapbox-gl-draw': '{{ STATIC_URL }}bower_components/mapbox-gl-draw/index',
            'proj4': '{{ STATIC_URL }}bower_components/proj4/dist/proj4',
            'noUiSlider': '{{ STATIC_URL }}bower_components/nouislider/distribute/nouislider.min',
            'geojson-extent': '{{ STATIC_URL }}bower_components/geojson-extent/geojson-extent',
            'bootstrap-colorpicker': '{{ STATIC_URL }}bower_components/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.min',
            'uuid': '{{ STATIC_URL }}bower_components/uuid.js/dist/uuid.core',
            'turf': '{{ STATIC_URL }}bower_components/turf/index',
            'geohash': '{{ STATIC_URL }}bower_components/geohash/latlon-geohash',
            'nvd3': '{{ STATIC_URL }}bower_components/nvd3/build/nv.d3.min',
            'leaflet': '{{ STATIC_URL }}bower_components/leaflet/dist/leaflet',
            'leaflet-iiif': '{{ STATIC_URL }}bower_components/leaflet-iiif/leaflet-iiif',
            'leaflet-draw': '{{ STATIC_URL }}bower_components/leaflet-draw/dist/leaflet.draw',
            'mathjs': '{{ STATIC_URL }}bower_components/mathjs/dist/math.min'
        },
        packages: [{
            name: "codemirror",
            location: '{{ STATIC_URL }}bower_components/codemirror',
            main: "lib/codemirror"
        }],
        shim: {
            'nifty': {
                deps: ['bootstrap', 'jquery', 'jquery-ui']
            },
            'chosen': {
                deps: ['jquery']
            },
            'bootstrap': {
                deps: ['jquery', 'jquery-ui']
            },
            'knockout-mapping': {
                deps: ['knockout']
            },
            'jquery-validate': {
                deps: ['jquery']
            },
            'jquery-ui': {
                deps: ['jquery']
            },
            'datatables': {
                deps: ['jquery']
            },
            'datatables.net': {
                deps: ['jquery']
            },
            'noUiSlider': {
                deps: ['jquery'],
                exports : '$'
            },
            'mapbox-gl-draw': {
                deps: ['mapbox-gl']
            },
            'select2': {
                deps: ['jquery'],
            },
            'moment': {
                deps: ['jquery']
            },
            'uuid': {
                exports: 'UUID'
            },
            'geohash': {
                exports: 'Geohash'
            },
            'nvd3': {
                deps: ['d3'],
                exports: 'nv'
            },
            'leaflet-iiif': {
                deps: ['leaflet']
            },
            'leaflet-draw': {
                deps: ['leaflet']
            },
            'ckeditor-jquery': {
                deps: ['ckeditor']
            }
        }
    });

    require(['utils/set-csrf-token']);

    // put values here that should be accessible application wide
    define('arches', [], function () {
        return {
            urls: {
                root: "{% url 'root' %}",
                home: "{% url 'home' %}",
                media: "{{ STATIC_URL }}",
                rdm: "{% url 'rdm' ''%}",
                uploadedfiles: "{{ MEDIA_URL }}",
                concept_tree: "{% url 'concept_tree' '' %}",
                concept: "{% url 'concept' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                concept_search: "{% url 'concept_search' %}",
                concept_value: "{% url 'concept_value' %}",
                concept_manage_parents: "{% url 'concept_manage_parents' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                concept_make_collection: "{% url 'make_collection' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                export_concept: "{% url 'export_concept' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                export_concept_collections: "{% url 'export_concept_collections' %}",
                dropdown: "{% url 'dropdown' %}",
                paged_dropdown: "{% url 'paged_dropdown' %}",
                get_pref_label: "{% url 'get_pref_label' %}",
                from_sparql_endpoint: "{% url 'from_sparql_endpoint' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                search_sparql_endpoint: "{% url 'search_sparql_endpoint' %}",
                confirm_delete: "{% url 'confirm_delete' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                search_terms: "{% url 'search_terms' %}",
                search_results: "{% url 'search_results' %}",
                search_results_export: "{% url 'search_results_export' %}",
                buffer: "{% url 'buffer'%}",
                config: "{% url 'config' %}",
                node: "{% url 'node' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                node_layer: "{% url 'node_layer' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                graph: "{% url 'graph' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                card: "{% url 'card' '' %}",
                form: "{% url 'form' '' %}",
                resource: "{% url 'resource' %}",
                resource_editor: "{% url 'resource_editor' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                resource_copy: "{% url 'resource_copy' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                resource_report: "{% url 'resource_report' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                resource_edit_log: "{% url 'resource_edit_log' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                resource_data: "{% url 'resource_data' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace(/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/g, ''),
                related_resources: "{% url 'related_resources' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                resource_descriptors: "{% url 'resource_descriptors' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                tile: "{% url 'tile' %}",
                report_editor: "{% url 'report_editor' '' %}",
                reorder_tiles: "{% url 'reorder_tiles' %}",
                apply_functions: "{% url 'apply_functions' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                remove_functions: "{% url 'remove_functions' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                tileserver: "{% url 'tileserver' %}",
                time_wheel_config: "{% url 'time_wheel_config' %}",
                reindex: "{% url 'reindex' %}",
                permission_data: "{% url 'permission_data' %}",
                clone_graph: function(graphid){return "{% url 'clone_graph' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                export_graph: function(graphid){return "{% url 'export_graph' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                export_mapping_file: function(graphid){return "{% url 'export_mapping_file' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                add_resource: function(graphid){return "{% url 'add_resource' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                graph_settings: function(graphid){return "{% url 'graph_settings' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                card_manager: function(graphid){return "{% url 'card_manager' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                report_manager: function(graphid){return "{% url 'report_manager' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                function_manager: function(graphid){return "{% url 'function_manager' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                form_manager: function(graphid){return "{% url 'form_manager' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)},
                permission_manager: function(graphid){return "{% url 'permission_manager' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', graphid)}
            },
            confirmNav: {
                title: "{% trans 'Edits pending...' %}",
                text: "{% trans 'You currently have edits pending, are you sure you would like to proceed (and discard any pending edits)?' %}"
            },
            confirmGraphDelete: {
                title: "{% trans 'Delete Branch/Resource Model?' %}",
                text: "{% trans 'Deleting this branch/resource model will remove it (and all associated data) entirely.  Are you sure you would like to proceed?' %}"
            },
            confirmResourceDelete: {
                title: "{% trans 'Delete Resource?' %}",
                text: "{% trans 'Deleting this resource will remove it (and all associated data) entirely.  Are you sure you would like to proceed?' %}"
            },
            confirmMaplayerDelete: {
                title: "{% trans 'Delete map layer?' %}",
                text: "{% trans 'Deleting this map layer will remove it entirely.  You cannot undo this action.  Are you sure you would like to proceed?' %}"
            },
            graphImportFailed: {
                title: "{% trans 'Graph import failed.'%}"
            },
            requestFailed: {
                title: "{% trans 'Request Failed...' %}",
                text: "{% trans 'Sorry! The request failed. Please try again.  Contact your system administrator if the problem persists.' %}"
            },
            resourceCopySuccess: {
                title: "{% trans 'Resource Successfully Copied.'%}"
            },
            resourceCopyFailed: {
                title: "{% trans 'Resource Copy Failed...'%}",
                text: "{% trans 'Sorry! The copy request failed. Please try again.  Contact your system administrator if the problem persists.' %}"
            },
            mapboxApiKey: '{{ map_info.mapbox_api_key }}',
            mapzenApiKey: '{{ map_info.mapzen_api_key }}',
            hexBinSize: {{ map_info.hex_bin_size }},
            mapboxSprites: '{{ map_info.mapbox_sprites }}',
            mapboxGlyphs: '{{ map_info.mapbox_glyphs }}',
            hexBinBounds: {{ map_info.hex_bin_bounds }},
            mapDefaultX: {{ map_info.x }},
            mapDefaultY: {{ map_info.y }},
            mapDefaultZoom: {{ map_info.zoom }},
            mapDefaultMinZoom: {{ map_info.map_min_zoom }},
            mapDefaultMaxZoom: {{ map_info.map_max_zoom }},
            preferredCoordinateSystems: {% autoescape off %}{{ map_info.preferred_coordinate_systems }}{% endautoescape %},
            useSemanticRelationships: {{ use_semantic_relationships|lower }},
            geocoderDefault: '{{ map_info.geocoder_default }}',
            mapSources: {{% autoescape off %}{% for map_source in map_sources %}
                '{{ map_source.name }}': {{ map_source.source_json }},
            {% endfor %}{% for resource_map_source in resource_map_sources %}
                '{{ resource_map_source.name }}': {{ resource_map_source.source }},
            {% endfor %}{% endautoescape %}},
            mapLayers: [{% autoescape off %}{% for map_layer in map_layers %}{
                'maplayerid': '{{ map_layer.maplayerid }}',
                'name': '{{ map_layer.name }}',
                'layer_definitions': {{ map_layer.layer_json }},
                'isoverlay': {{ map_layer.isoverlay|lower }},
                'icon': '{{ map_layer.icon }}',
                'activated': {{ map_layer.activated|lower }},
                'addtomap': {{ map_layer.addtomap|lower }},
                'is_resource_layer': false,
                'centerx': {{ map_layer.centerx|default_if_none:"null" }},
                'centery': {{ map_layer.centery|default_if_none:"null" }},
                'zoom': {{ map_layer.zoom|default_if_none:"null" }}
            },{% endfor %}{% for resource_map_layer in resource_map_layers %}{
                'maplayerid': '{{ resource_map_layer.nodeid }}',
                'name': '{{ resource_map_layer.name }}',
                'layer_definitions': {{ resource_map_layer.layer_definitions }},
                'isoverlay': true,
                'icon': '{{ resource_map_layer.icon }}',
                'activated': true,
                'addtomap': {{ resource_map_layer.addtomap|lower }},
                'is_resource_layer': true
            },{% endfor %}{% endautoescape %}],
            iiifManifests: [{% autoescape off %}{% for manifest in iiif_manifests %}{
                'id': '{{ manifest.id }}',
                'url': '{{ manifest.url }}',
                'icon': '{{ manifest.icon }}'
            },{% endfor %}{% endautoescape %}],
            conceptCollections: [{% autoescape off %}{% for concept_collection in concept_collections %}{
                'label': '{{ concept_collection.label }}',
                'id': '{{ concept_collection.id }}',
            },{% endfor %}{% endautoescape %}],
            geocodingProviders: [{% autoescape off %}{% for provider in geocoding_providers %}{
                'name': '{{ provider.name }}',
                'geocoderid': '{{ provider.geocoderid }}',
                'api_key': {% if provider.api_key != None %} '{{ provider.api_key }}' {% elif provider.api_key == None %} null {% endif %},
                'component': '{{ provider.component }}'
            },{% endfor %}{% endautoescape %}],
            resources: [{% autoescape off %}{% for resource in resource_graphs %}{
              'maplayerid': '{{resource.graphid}}',
              'graphid': '{{resource.graphid}}',
              'name': '{{ resource.name }}',
              'icon': '{{ resource.iconclass }}',
            },{% endfor %}{% endautoescape %}],
            graphs: {% autoescape off %}{{graphs|default_if_none:"[]"}}{% endautoescape %}
        };
    });

    define('resource-types', [], function () {
        var resourceTypes = {
            {% for type, type_data in resource_types %}
            "{{type}}": {
                id: "{{type_data.resourcetypeid}}",
                icon: "{{type_data.icon_class}}",
                name: "{{type_data.name}}",
                defaultDescription: "{{type_data.default_description}}",
                descriptionNode: "{{type_data.description_node}}",
                categories: [
                    {% for category in type_data.categories %}
                    "{{category}}"
                    {% endfor %}
                ],
                color: "{{type_data.marker_color}}",
                strokeColor: "{{type_data.stroke_color}}",
                fillColor: "{{type_data.fill_color}}"
            },
            {% endfor %}
        };

        return resourceTypes;
    });

    define('widgets', [{% for widget in widgets %}'{{ widget.component }}',{% endfor %}], function () {
        return {{% autoescape off %}{% for widget in widgets %}
            '{{ widget.pk }}': {
                'name': '{{ widget.name }}',
                'component': '{{ widget.component }}',
                'datatype': '{{ widget.datatype }}',
                'defaultconfig': '{{ widget.defaultconfig_json }}'
            },
        {% endfor %}{% endautoescape %}};
    });

    define('report-templates', [{% for template in report_templates %}'{{ template.component }}',{% endfor %}], function () {
        return {{% autoescape off %}{% for template in report_templates %}
            '{{ template.pk }}': {
                'componentname': '{{ template.componentname }}',
                'component': '{{ template.component }}',
                'defaultconfig': '{{ template.defaultconfig_json }}'
            },
        {% endfor %}{% endautoescape %}};
    });

    define('function-templates', [{% for template in function_templates %}'{{ template.component }}',{% endfor %}], function () {
         return;
    });

    define('component-templates', ['views/components/nodegroup-selector'], function () {
         return;
    });

    define('geocoder-templates', [{% for provider in geocoding_providers %}'{{ provider.component }}',{% endfor %}], function () {
         return;
    });

    define('datatype-config-components',
        [{% for datatype in datatypes %}{% if datatype.configcomponent != None %}'{{ datatype.configcomponent }}',{% endif %}{% endfor %}],
        function () { return });

    define('geoms', function () {
        {% autoescape off %}return {{geoms}};{% endautoescape %}
    });

    define('leaflet-draw-local', [
        'leaflet',
        'leaflet-draw'
    ], function (L) {
        L.drawLocal.draw.toolbar.actions.title = '{% trans "Cancel drawing" %}';
        L.drawLocal.draw.toolbar.actions.text = '{% trans "Cancel" %}';

        L.drawLocal.draw.toolbar.finish.title = '{% trans "Finish drawing" %}';
        L.drawLocal.draw.toolbar.finish.text = '{% trans "Finish" %}';

        L.drawLocal.draw.toolbar.undo.title = '{% trans "Delete last point drawn" %}';
        L.drawLocal.draw.toolbar.undo.text = '{% trans "Delete last point" %}';

        L.drawLocal.draw.toolbar.buttons.polyline = '{% trans "Draw a polyline" %}';
        L.drawLocal.draw.toolbar.buttons.polygon = '{% trans "Draw a polygon" %}';
        L.drawLocal.draw.toolbar.buttons.rectangle = '{% trans "Draw a rectangle" %}';
        L.drawLocal.draw.toolbar.buttons.circle = '{% trans "Draw a circle" %}';
        L.drawLocal.draw.toolbar.buttons.marker = '{% trans "Draw a marker" %}';

        L.drawLocal.draw.handlers.circle.tooltip.start = '{% trans "Click and drag to draw circle." %}';
        L.drawLocal.draw.handlers.circle.radius = '{% trans "Radius" %}';

        L.drawLocal.draw.handlers.marker.tooltip.start = '{% trans "Click map to place marker." %}';

        L.drawLocal.draw.handlers.polygon.tooltip.start = '{% trans "Click to start drawing shape." %}';
        L.drawLocal.draw.handlers.polygon.tooltip.cont = '{% trans "Click to continue drawing shape." %}';
        L.drawLocal.draw.handlers.polygon.tooltip.end = '{% trans "Click first point to close this shape." %}';

        L.drawLocal.draw.handlers.polyline.error = '{% trans "<strong>Error:</strong> shape edges cannot cross!" %}';
        L.drawLocal.draw.handlers.polyline.tooltip.start = '{% trans "Click to start drawing line." %}';
        L.drawLocal.draw.handlers.polyline.tooltip.cont = '{% trans "Click to continue drawing line." %}';
        L.drawLocal.draw.handlers.polyline.tooltip.end = '{% trans "Click last point to finish line." %}';

        L.drawLocal.draw.handlers.rectangle.tooltip.start = '{% trans "Click and drag to draw rectangle." %}';
        L.drawLocal.draw.handlers.simpleshape.tooltip.end = '{% trans "Release mouse to finish drawing." %}';

        L.drawLocal.edit.toolbar.actions.save.title = '{% trans "Apply changes." %}';
        L.drawLocal.edit.toolbar.actions.save.text = '{% trans "Apply" %}';

        L.drawLocal.edit.toolbar.actions.cancel.title = '{% trans "Undo edits, discards all changes." %}';
        L.drawLocal.edit.toolbar.actions.cancel.text = '{% trans "Undo" %}';

        L.drawLocal.edit.toolbar.buttons.edit = '{% trans "Edit drawings." %}';
        L.drawLocal.edit.toolbar.buttons.editDisabled = '{% trans "No drawings to edit." %}';
        L.drawLocal.edit.toolbar.buttons.remove = '{% trans "Delete drawings." %}';
        L.drawLocal.edit.toolbar.buttons.removeDisabled = '{% trans "No drawings to delete." %}';

        L.drawLocal.edit.handlers.edit.tooltip.text = '{% trans "Drag handles, or marker to edit feature." %}';
        L.drawLocal.edit.handlers.edit.tooltip.subtext = '{% trans "Click undo to cancel changes." %}';

        L.drawLocal.edit.handlers.remove.tooltip.text = '{% trans "Click on a feature to remove" %}';
    });
</script>
