{% load staticfiles %}
{% load i18n %}

<script src="http://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js"></script>
{% block pre_require_js %}
{% endblock pre_require_js %}
<script>
    require.config({
        baseUrl: '{{ STATIC_URL }}js',
        paths: {
            'plugins': '{{ STATIC_URL }}plugins',
            'async': 'http://cdnjs.cloudflare.com/ajax/libs/requirejs-async/0.1.1/async',
            'jquery': 'http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min',
            'select2': 'http://cdnjs.cloudflare.com/ajax/libs/select2/3.5.1/select2.min',
            'bootstrap': 'http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.1.0/js/bootstrap.min',
            'bootstrap-nifty': 'http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.min',
            'jquery-ui': 'http://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min',
            'flexslider': 'http://cdnjs.cloudflare.com/ajax/libs/flexslider/2.2.2/jquery.flexslider-min',
            'openlayers': '{{ STATIC_URL }}plugins/openlayers/ol',
            'easing': 'http://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min',
            'backbone': 'http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min',
            'underscore': 'http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min',
            'jquery-validate': 'http://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.11.1/jquery.validate.min',
            'd3': 'http://cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min',
            'dropzone': 'http://cdnjs.cloudflare.com/ajax/libs/dropzone/3.8.4/dropzone-amd-module.min',
            'summernote': 'http://cdnjs.cloudflare.com/ajax/libs/summernote/0.5.10/summernote.min',
            'knockout': 'http://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min',
            //'knockout': 'http://knockoutjs.com/downloads/knockout-3.3.0.debug',
            'knockout-mapping': 'http://cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min',
            'moment': 'http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min',
            'bootstrap-datetimepicker': 'http://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/3.1.3/js/bootstrap-datetimepicker.min',
            'shp': 'https://raw.githubusercontent.com/wavded/js-shapefile-to-geojson/master/shapefile',
            'blueimp-gallery': 'https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.15.2/js/blueimp-gallery',
            'blueimp-jquery': 'http://blueimp.github.io/Gallery/js/jquery.blueimp-gallery',
            'blueimp-helper': 'https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.15.2/js/blueimp-helper.min',
            'bootstrap-datepicker': 'https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.0/js/bootstrap-datepicker.min',
            'chosen': 'https://cdnjs.cloudflare.com/ajax/libs/chosen/1.4.2/chosen.jquery.min',
            'isotope': 'https://cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.2.2/isotope.pkgd',
            'isotope-packery': 'https://cdn.rawgit.com/metafizzy/isotope-packery/master/packery-mode.pkgd',
        },
        shim: {
            'openlayers': {
                exports: 'ol'
            }
        }
    });

    // application wide require calls
    require(["jquery", 'isotope'], function($, Isotope) {
        var jQuery = $;

        // put values here that should be accessible application wide
        define('arches', [], function () {
            return {
                urls: {
                    home: "{% url 'home' %}",
                    media: "{{ STATIC_URL }}",
                    uploadedfiles: "{{ MEDIA_URL }}",
                    concept_tree: "{% url 'concept_tree' %}",
                    concept: "{% url 'concept' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                    concept_search: "{% url 'concept_search' %}",
                    concept_manage_parents: "{% url 'concept_manage_parents' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                    from_sparql_endpoint: "{% url 'from_sparql_endpoint' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                    search_sparql_endpoint: "{% url 'search_sparql_endpoint' %}",
                    confirm_delete: "{% url 'confirm_delete' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                    edit_history: "{% url 'edit_history' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}",
                    search_terms: "{% url 'search_terms' %}",
                    search_results: "{% url 'search_results' %}",
                    search_results_export: "{% url 'search_results_export' %}",
                    map_layers: "{% url 'map_layers' '' %}",
                    map_markers: "{% url 'map_markers' '' %}",
                    reports: "{% url 'report' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                    buffer: "{% url 'buffer'%}",
                    related_resources: "{% url 'related_resources' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}".replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', ''),
                    get_admin_areas: "{% url 'get_admin_areas'%}",
                    config: "{% url 'config'%}",
                    node: "{% url 'node' 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' %}"
                },
                mapDefaults: {
                    x: {{ map_info.x }},
                    y: {{ map_info.y }},
                    zoom: {{ map_info.zoom }},
                    minZoom: {{ map_info.map_min_zoom }},
                    maxZoom: {{ map_info.map_max_zoom }},
                    extent: '{{ map_info.extent }}'
                },
                resourceMarker: {
                    font: '{{ map_info.resource_marker_font }}',
                    icon: '{{ map_info.resource_marker_icon }}',
                    defaultColor: '{{ map_info.resource_marker_color }}'
                },
                bingKey: "{{ map_info.bing_key }}",
                bingLayers: [{
                    id: 'Road',
                    name: "{% trans 'Streets' %}",
                    icon: "{% static 'img/map/bing_streets.png' %}"
                },
                {
                    id: 'Aerial',
                    name: "{% trans 'Satellite' %}",
                    icon: "{% static 'img/map/bing_satellite.png' %}"
                },
                {
                    id: 'AerialWithLabels',
                    name: "{% trans 'Streets & Satellite' %}",
                    icon: "{% static 'img/map/bing_hybrid.png' %}"
                }]
            };
        });

        define('resource-types', [], function () {
            var resourceTypes = {
                {% for type, type_data in resource_types %}
                "{{type}}": {
                    id: "{{type_data.resourcetypeid}}",
                    icon: "{{type_data.icon_class}}",
                    name: "{{type_data.name}}",
                    defaultDescription: "{{type_data.default_description}}",
                    descriptionNode: "{{type_data.description_node}}",
                    categories: [
                        {% for category in type_data.categories %}
                        "{{category}}"
                        {% endfor %}
                    ],
                    color: "{{type_data.marker_color}}",
                    strokeColor: "{{type_data.stroke_color}}",
                    fillColor: "{{type_data.fill_color}}"
                },
                {% endfor %}
            };

            return resourceTypes;;
        });

        require(["plugins/scroll-to-top", "views/simple-search", "bootstrap", "jquery-ui"], function (scrollToTop, SimpleSearch) {

            var search = new SimpleSearch({ el: $('#simple-search')[0] });
            var scrollableElement;
            {% if active_page == 'ResourceReport' %}
                scrollableElement = $('#report-body');
            {% endif %}

            scrollToTop.init(scrollableElement);
            // include all base_page instances here that page scripts may need access to
            // NOTE: this module should only ever be required from within main page scripts
            define('base_page', [], function () {
                return {
                    search: search,
                    scrollToTop: scrollToTop
                };
            });

            {% if main_script %}
                // main page script require
                require(["{{ main_script }}"]);
            {% endif %}

            $('[data-toggle="popover"]').popover();
        });
    });
</script>
