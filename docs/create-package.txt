Packages
--------

A package is an external collection of arches data (resource models, business data, concepts, collections) and customization files (widgets, datatypes, functions, system settings) that you can load into an arches project.


Loading a Package
`````````````````

#. To load a package simply run the load_package command using your \*project's manage.py file:

    .. code-block:: bash

        python manage.py packages -o load_package -s https://github.com/package/archive/branch.zip -db true


    -db    `true` to run setup_db to rebuild your database. default = 'false'
    -ow    `overwrite` to overwrite concepts and collections. default = 'ignore'
    -st    `stage` to stage concepts and collections. default = 'stage'
    -s     a path to a zipfile located on github or locally
    -o     operation name

    If you do not pass the `-db True` to the load_package command, your database will not be recreated. If you already have resource models and branches with the same id as those you are importing, you will be prompted to confirm whether you would like to keep or overwrite each model or branch.

    \*It is important to note that you cannot load a package directly into core Arches. Currently packages must be loaded into a project. :doc:`Create a project <../project-setup>`.

    If you are a developer running the latest arches you probably want to create a project with a new arches installation. This ensures that the `arches_project create` command uses the latest project templates.

        #. Uninstall arches from your virtualenv

            .. code-block:: bash

                pip uninstall arches

        #. Navigate into arches root folder delete the `build` directory

        #. Reinstall arches

            .. code-block:: bash

                python setup.py install

                python setup.py develop

        #. Navigate to where you want to create your new project and run:

            .. code-block:: bash

                arches-project create mynewproject

        #. Finally run the `load_package` command using the projects manage.py file.

            .. code-block:: bash

                python manage.py packages -o load_package -s https://github.com/package/archive/branch.zip -db true


Creating a New Package
``````````````````````

If you want to create additional projects with the same data or share your data with others that need to create similar projects, you probably want to create a package.

The `create_package` command will help you get started by generating the folder structure of a new package.

#. To create new package simply run the create_package command. The following example would create a package called `mypackge`.

    .. code-block:: bash

        python manage.py packages -o create_package -d /Full/path/to/mypackage

    -d    full path to the package directory you would like to create
    -o    operation name

#. Below is a list of directories created by the `create_package` command and a brief description of what belongs in each. Be sure not to place files that you do not want loaded into these directories. If, for example, you have draft business_data that is not ready for loading, just add a new directory and stage your files there. Directories other than what is listed below will be ignored by the loader.

    business_data
        Resource instance .csv and corresponding .mapping files, each sharing the same base name.
    business_data/files
        Files to be added to the uploaded files directory
    business_data/relations
        Resource relationship files (.relations)
    extensions/function
        Each function in this directory should have its own directory with a template (.htm), viewmodel (.js) and module (.py). Each file must share the same base name.
    extensions/datatypes
        Each datatype in this directory should have its own directory with a template (.htm), viewmodel (.js) and module (.py). Each file must share the same base name.
    extensions/widgets
        Each widget in this directory should have its own folder with a template (.htm), viewmodel (.js) and configuration file (.json). Each file must share the same base name.
    graphs/branches
        arches.json files representing branches
    graphs/resource_models
        arches.json files representing resource models
    map_layers/mapbox_styles/overlays*
        Each overlay should have a directory with a mapbox style as exported from mapbox including a `style.json` file, `license.txt` file and an `icons` directory
    map_layers/mapbox_styles/basemaps*
        Each basemap should have a directory with a mapbox style as exported from mapbox including a `style.json` file, `license.txt` file and an `icons` directory
    map_layers/tile_server/overlays*
        Each overlay should have a directory with a `.vrt` file and `.xml` to style and configure the layer. Each file must share the same base name.
    map_layers/tile_server/basemaps*
        Each overlay should have a directory with a `.vrt` file and `.xml` to style and configure the layer. Each file must share the same base name.
    reference_data/concepts
        SKOS concepts .xml files
    reference_data/collections
        SKOS collection .xml files
    system_settings
        The system settings file for your project

    \* map layer configuration
        By default mapbox-style layers will be loaded with the name property found in the layer's style.json file. The default name for tile server layers will be the basename of the layer's xml file. For both mapbox-style and tile server layers the default icon-class will be `fa fa-globe`. To customize the name and icon-class, simply add a meta.json file to the layer's directory with the following object:

        .. code-block:: javascript

            {
                "name": "example name",
                "icon": "fa example-class"
            }

#. It is not necessary to populate every directory with data. Only add those files that you would like to share.

    Once you've added the necessary files to your package, simply compress it as a zip file or push it to a github repository and it's ready to be loaded.
